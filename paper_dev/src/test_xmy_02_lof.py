# -*- coding: utf8 -*-

from src.lof import outliers
from matplotlib import pyplot as p
import numpy as np
import time


# 将数据组成数据点
def compose_instances(data):
    y = data
    x = np.arange(1, len(data) + 1)
    point = list(zip(x, y))
    return point


if __name__ == "__main__":
    # instances = [
    #  (-4.8447532242074978, -5.6869538132901658),
    #  (1.7265577109364076, -2.5446963280374302),
    #  (-1.9885982441038819, 1.705719643962865),
    #  (-1.999050026772494, -4.0367551415711844),
    #  (-2.0550860126898964, -3.6247409893236426),
    #  (-1.4456945632547327, -3.7669258809535102),
    #  (-4.6676062022635554, 1.4925324371089148),
    #  (-3.6526420667796877, -3.5582661345085662),
    #  (6.4551493172954029, -0.45434966683144573),
    #  (-0.56730591589443669, -5.5859532963153349),
    #  (-5.1400897823762239, -1.3359248994019064),
    #  (5.2586932439960243, 0.032431285797532586),
    #  (6.3610915734502838, -0.99059648246991894),
    #  (-0.31086913190231447, -2.8352818694180644),
    #  (1.2288582719783967, -1.1362795178325829),
    #  (-0.17986204466346614, -0.32813130288006365),
    #  (2.2532002509929216, -0.5142311840491649),
    #  (-0.75397166138399296, 2.2465141276038754),
    #  (1.9382517648161239, -1.7276112460593251),
    #  (1.6809250808549676, -2.3433636210337503),
    #  (0.68466572523884783, 1.4374914487477481),
    #  (2.0032364431791514, -2.9191062023123635),
    #  (-1.7565895138024741, 0.96995712544043267),
    #  (3.3809644295064505, 6.7497121359292684),
    #  (-4.2764152718650896, 5.6551328734397766),
    #  (-3.6347215445083019, -0.85149861984875741),
    #  (-5.6249411288060385, -3.9251965527768755),
    #  (4.6033708001912093, 1.3375110154658127),
    #  (-0.685421751407983, -0.73115552984211407),
    #  (-2.3744241805625044, 1.3443896265777866)]

    ce1 = [47.202, 47.273, 47.25, 47.332, 47.213, 47.372, 47.273, 47.438, 46.691, 46.599, 46.623, 46.653, 46.136,
           46.127, 45.948, 45.935, 45.726, 45.139, 44.978, 44.937, 44.269, 44.079, 43.741, 43.375, 42.847, 42.322,
           42.322, 41.797, 41.406, 40.924, 40.427, 39.857, 39.517, 38.999, 38.493, 37.954, 37.552, 37.084, 36.615,
           36.098, 35.58, 35.141, 34.184, 34.177, 33.739, 33.226, 32.913, 32.4, 31.833, 31.862, 31.554, 30.953, 30.639,
           30.561, 30.368, 30.224, 29.79, 29.261, 29.287, 28.866]
    ce153 = [19.575, 19.622, 19.744, 19.906, 19.707, 19.757, 19.782, 19.697, 19.727, 19.744, 19.821, 19.814, 19.829,
             19.724, 19.921, 19.851, 20.092, 20.176, 20.153, 20.084, 20.035, 20.269, 20.245, 20.225, 20.101, 19.973,
             20.203, 19.789, 19.757, 19.759, 19.757, 19.647, 19.645, 19.714, 19.687, 19.697, 19.547, 19.57, 19.52,
             19.682, 19.607, 19.781, 19.694, 19.729, 19.756, 19.612, 19.679, 19.719, 19.575, 19.495, 19.634, 19.592,
             19.766, 19.741, 19.756, 19.729, 19.851, 19.712, 19.856, 19.781]
    ce652 = [19.047, 18.882, 19.101, 18.948, 18.825, 18.937, 18.842, 18.889, 18.925, 18.854, 18.717, 18.806, 18.835,
             18.819, 18.771, 18.835, 18.771, 18.809, 18.889, 18.866, 18.869, 18.79, 19.031, 19.057, 19.113, 19.075,
             19.104, 19.094, 18.892, 18.864, 18.892, 18.875, 18.819, 18.828, 18.835, 18.854, 18.899, 18.812, 18.864,
             18.873, 18.914, 18.714, 18.873, 18.952, 19.064, 19.104, 19.059, 19.118, 19.075, 19.094, 19.094, 19.075,
             19.092, 19.104, 19.054, 19.064, 18.848, 19.007, 19.045, 19.146]
    ce47 = [19.515, 19.567, 19.646, 19.85, 19.852, 19.824, 19.75, 19.683, 19.475, 19.639, 19.693, 19.696, 19.714, 19.76,
            19.727, 19.67, 19.398, 19.643, 19.359, 19.359, 19.612, 19.671, 19.63, 19.63, 19.669, 19.339, 19.157, 19.063,
            19.009, 18.894, 19.001, 18.908, 19.129, 19.137, 19.088, 18.994, 18.779, 18.759, 18.675, 18.795, 18.785,
            18.911, 19.012, 19.209, 19.276, 19.279, 18.994, 19.163, 19.168, 19.219, 19.468, 19.445, 19.727, 19.696,
            19.696, 19.67, 19.437, 19.483, 19.357, 19.527]
    cp1 = [2.184, 2.184, 2.184, 2.185, 2.178, 2.188, 2.177, 2.18, 2.151, 2.143, 2.156, 2.166, 2.128, 2.122, 2.137,
           2.134, 2.142, 2.12, 2.122, 2.122, 2.087, 2.085, 2.062, 2.052, 2.021, 1.995, 2.001, 1.979, 1.956, 1.932,
           1.916, 1.893, 1.863, 1.841, 1.828, 1.809, 1.785, 1.763, 1.74, 1.72, 1.692, 1.668, 1.623, 1.623, 1.608, 1.586,
           1.563, 1.538, 1.52, 1.518, 1.509, 1.47, 1.458, 1.452, 1.443, 1.449, 1.428, 1.401, 1.402, 1.383]
    cp481 = [1.595, 1.612, 1.617, 1.638, 1.618, 1.622, 1.599, 1.605, 1.6, 1.573, 1.577, 1.575, 1.593, 1.592, 1.583,
             1.582, 1.571, 1.575, 1.57, 1.574, 1.567, 1.582, 1.588, 1.599, 1.609, 1.615, 1.615, 1.597, 1.582, 1.586,
             1.585, 1.597, 1.604, 1.611, 1.604, 1.609, 1.599, 1.58, 1.589, 1.588, 1.583, 1.583, 1.604, 1.597, 1.609,
             1.606, 1.609, 1.61, 1.605, 1.606, 1.609, 1.613, 1.632, 1.63, 1.626, 1.607, 1.605, 1.585, 1.596, 1.601]
    cp819 = [1.698, 1.689, 1.718, 1.714, 1.69, 1.692, 1.703, 1.693, 1.691, 1.714, 1.702, 1.704, 1.705, 1.709, 1.714,
             1.722, 1.714, 1.695, 1.712, 1.723, 1.729, 1.73, 1.726, 1.724, 1.711, 1.705, 1.716, 1.717, 1.713, 1.699,
             1.721, 1.711, 1.711, 1.701, 1.706, 1.699, 1.701, 1.687, 1.713, 1.713, 1.718, 1.71, 1.711, 1.707, 1.709,
             1.693, 1.697, 1.688, 1.685, 1.689, 1.716, 1.71, 1.701, 1.704, 1.708, 1.696, 1.689, 1.695, 1.693, 1.714]
    ts4 = [38.633, 38.535, 38.469, 38.379, 38.297, 38.223, 38.125, 38.062, 37.977, 37.969, 37.887, 37.902, 37.965,
           38.047, 38.18, 38.203, 38.367, 38.406, 38.457, 38.629, 38.633, 38.699, 38.801, 38.801, 38.828, 38.902,
           38.895, 38.969, 38.988, 39.055, 39.055, 39.055, 39.055, 39.121, 39.215, 39.215, 39.219, 39.227, 39.273,
           39.285, 39.293, 39.293, 39.273, 39.285, 39.375, 39.359, 39.375, 39.379, 39.367, 39.363, 39.441, 39.363,
           39.367, 39.457, 39.461, 39.461, 39.473, 39.441, 39.453, 39.461]
    ts3 = [37.488, 37.391, 37.34, 37.312, 37.223, 37.145, 37.059, 36.973, 36.898, 36.879, 36.887, 36.887, 36.98, 37.059,
           37.137, 37.23, 37.316, 37.398, 37.477, 37.582, 37.578, 37.723, 37.73, 37.73, 37.797, 37.898, 37.98, 37.977,
           37.984, 38.016, 38.031, 38.047, 38.117, 38.125, 38.195, 38.219, 38.207, 38.289, 38.301, 38.281, 38.367,
           38.379, 38.379, 38.379, 38.379, 38.375, 38.367, 38.391, 38.391, 38.469, 38.457, 38.461, 38.457, 38.469,
           38.469, 38.555, 38.527, 38.543, 38.527, 38.621]
    ts32 = [50.133, 50.039, 50.02, 49.887, 49.793, 49.742, 49.715, 49.625, 49.586, 49.547, 49.547, 49.465, 49.477,
            49.543, 49.598, 49.621, 49.73, 49.746, 49.785, 49.801, 49.879, 49.875, 49.957, 49.973, 50.008, 50.039,
            50.012, 50.012, 50.051, 50.055, 50.141, 50.129, 50.207, 50.195, 50.207, 50.289, 50.293, 50.359, 50.371,
            50.371, 50.379, 50.371, 50.383, 50.293, 50.293, 50.281, 50.293, 50.277, 50.289, 50.289, 50.199, 50.207,
            50.211, 50.199, 50.211, 50.211, 50.223, 50.211, 50.207, 50.207]

    instances = compose_instances(ts4)

    start_time = time.time()
    lof = outliers(7, instances)
    end_time = time.time()
    for outlier in lof:
        print(outlier["lof"], outlier["instance"])

    x, y = zip(*instances)
    p.scatter(x, y, 20, color="#0000FF")

    for outlier in lof:
        value = outlier["lof"]
        instance = outlier["instance"]
        color = "#FF0000" if value > 1 else "#00FF00"
        p.scatter(instance[0], instance[1], color=color, s=(value - 1) ** 2 * 10 + 20)
    p.show()

    print("time:   ", end_time - start_time)
